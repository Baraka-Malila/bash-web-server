name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Make scripts executable
      run: |
        chmod +x pilipili-server server.sh tests/test.sh install.sh
        chmod +x server-tiny-pure.sh server-ultra-pure.sh
        
    - name: Check dependencies
      run: |
        echo "Checking Bash version..."
        bash --version
        echo "Checking netcat availability..."
        which nc || echo "netcat not found"
        
    - name: Run tests
      run: |
        ./tests/test.sh
        
    - name: Test installation script
      run: |
        ./install.sh --help
        
    - name: Test server startup (quick)
      run: |
        timeout 5s ./pilipili-server --help || true
        timeout 5s ./pilipili-server --version || true
        
    - name: Test pure Bash implementations
      run: |
        ./server-tiny-pure.sh
        timeout 5s ./server-ultra-pure.sh --help || true

  lint:
    name: Shell Script Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install shellcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
    - name: Run shellcheck
      run: |
        shellcheck pilipili-server server.sh install.sh
        shellcheck server-tiny-pure.sh server-ultra-pure.sh
        shellcheck tests/test.sh

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run basic security checks
      run: |
        # Check for common security issues
        echo "Checking for hardcoded secrets..."
        ! grep -r "password\|secret\|key" --include="*.sh" . || echo "No secrets found"
        
        echo "Checking file permissions..."
        find . -name "*.sh" -perm /111 | head -10
        
        echo "Checking for potential command injection..."
        ! grep -r "eval\|exec.*\$" --include="*.sh" . || echo "No obvious command injection"

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Publish to NPM
      run: |
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release-assets:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create release tarball
      run: |
        mkdir -p dist
        tar -czf dist/pilipili-server-${{ github.ref_name }}.tar.gz \
          pilipili-server server.sh server-tiny-pure.sh server-ultra-pure.sh \
          install.sh public/ docs/ examples/ README.md LICENSE CHANGELOG.md
          
    - name: Create release zip
      run: |
        zip -r dist/pilipili-server-${{ github.ref_name }}.zip \
          pilipili-server server.sh server-tiny-pure.sh server-ultra-pure.sh \
          install.sh public/ docs/ examples/ README.md LICENSE CHANGELOG.md
          
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/pilipili-server-${{ github.ref_name }}.tar.gz
        asset_name: pilipili-server-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload zip asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/pilipili-server-${{ github.ref_name }}.zip
        asset_name: pilipili-server-${{ github.ref_name }}.zip
        asset_content_type: application/zip
